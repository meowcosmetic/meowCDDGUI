class ChildTracking {
  final String id;
  final String childId;
  final DateTime date;
  final Map<String, int> scores;
  final String notes;
  final double totalScore;
  final EmotionLevel emotionLevel;
  final ParticipationLevel participationLevel;
  final List<InterventionGoal> selectedGoals;

  ChildTracking({
    required this.id,
    required this.childId,
    required this.date,
    required this.scores,
    this.notes = '',
    required this.emotionLevel,
    required this.participationLevel,
    required this.selectedGoals,
  }) : totalScore = _calculateTotalScore(scores);

  static double _calculateTotalScore(Map<String, int> scores) {
    if (scores.isEmpty) return 0;
    int total = scores.values.reduce((a, b) => a + b);
    return total / scores.length;
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'childId': childId,
      'date': date.toIso8601String(),
      'scores': scores,
      'notes': notes,
      'emotionLevel': emotionLevel.index,
      'participationLevel': participationLevel.index,
      'selectedGoals': selectedGoals.map((goal) => goal.toJson()).toList(),
    };
  }

  factory ChildTracking.fromJson(Map<String, dynamic> json) {
    return ChildTracking(
      id: json['id'],
      childId: json['childId'],
      date: DateTime.parse(json['date']),
      scores: Map<String, int>.from(json['scores']),
      notes: json['notes'] ?? '',
      emotionLevel: EmotionLevel.values[json['emotionLevel'] ?? 0],
      participationLevel:
          ParticipationLevel.values[json['participationLevel'] ?? 0],
      selectedGoals:
          (json['selectedGoals'] as List?)
              ?.map((goal) => InterventionGoal.fromJson(goal))
              .toList() ??
          [],
    );
  }
}

enum EmotionLevel {
  veryHappy('üòÄ R·∫•t vui, h·ª£p t√°c t·ªët'),
  happy('üòÉ Vui, tham gia ·ªïn'),
  normal('üôÇ B√¨nh th∆∞·ªùng, √≠t h·ª©ng th√∫'),
  indifferent('üòê Ch∆∞a h·ª£p t√°c, th·ªù ∆°'),
  upset('üò¢ Kh√≥ ch·ªãu, t·ª´ ch·ªëi');

  const EmotionLevel(this.label);
  final String label;
}

enum ParticipationLevel {
  level1('‚≠ê Th·ªù ∆°, b√πng n·ªï, kh√¥ng tham gia'),
  level2('‚≠ê‚≠ê Tham gia √≠t, kh√¥ng ch√∫ √Ω, h·ª©ng th√∫ k√©m'),
  level3('‚≠ê‚≠ê‚≠ê Tham gia v·ª´a, ch√∫ √Ω ng·∫Øn, c·∫ßn nh·∫Øc nh·ªü nhi·ªÅu'),
  level4('‚≠ê‚≠ê‚≠ê‚≠ê Tham gia t·ªët, c√≥ ch√∫ √Ω, c·∫ßn nh·∫Øc nh·ªü √≠t'),
  level5('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê Ch·ªß ƒë·ªông, t√≠ch c·ª±c, ch√∫ √Ω t·ªët, kh√¥ng nh·∫Øc nh·ªü');

  const ParticipationLevel(this.label);
  final String label;
}

class InterventionGoal {
  final String id;
  final String title;
  final String description;
  final List<InterventionQuestion> questions;
  final bool isVisible;

  const InterventionGoal({
    required this.id,
    required this.title,
    required this.description,
    required this.questions,
    this.isVisible = true,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'questions': questions.map((q) => q.toJson()).toList(),
      'isVisible': isVisible,
    };
  }

  factory InterventionGoal.fromJson(Map<String, dynamic> json) {
    return InterventionGoal(
      id: json['id'],
      title: json['title'],
      description: json['description'],
      questions: (json['questions'] as List)
          .map((q) => InterventionQuestion.fromJson(q))
          .toList(),
      isVisible: json['isVisible'] ?? true,
    );
  }
}

class InterventionQuestion {
  final String id;
  final String question;
  final QuestionType type;
  final List<String> options;
  final String? answer;
  final bool isVisible;

  const InterventionQuestion({
    required this.id,
    required this.question,
    required this.type,
    required this.options,
    this.answer,
    this.isVisible = true,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'question': question,
      'type': type.index,
      'options': options,
      'answer': answer,
      'isVisible': isVisible,
    };
  }

  factory InterventionQuestion.fromJson(Map<String, dynamic> json) {
    return InterventionQuestion(
      id: json['id'],
      question: json['question'],
      type: QuestionType.values[json['type']],
      options: List<String>.from(json['options']),
      answer: json['answer'],
      isVisible: json['isVisible'] ?? true,
    );
  }
}

enum QuestionType { yesNo, supportLevel, environment }

class TrackingData {
  static const List<InterventionGoal> interventionGoals = [
    InterventionGoal(
      id: 'goal_1',
      title: 'Giao ti·∫øp b·∫±ng l·ªùi n√≥i',
      description: 'Tr·∫ª c√≥ th·ªÉ giao ti·∫øp b·∫±ng l·ªùi n√≥i v·ªõi ng∆∞·ªùi kh√°c',
      questions: [
        InterventionQuestion(
          id: 'goal_1_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_1_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_1_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
    InterventionGoal(
      id: 'goal_2',
      title: 'T∆∞∆°ng t√°c x√£ h·ªôi',
      description: 'Tr·∫ª c√≥ th·ªÉ t∆∞∆°ng t√°c v·ªõi b·∫°n b√® v√† ng∆∞·ªùi l·ªõn',
      questions: [
        InterventionQuestion(
          id: 'goal_2_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_2_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_2_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
    InterventionGoal(
      id: 'goal_3',
      title: 'T·ª± l·∫≠p trong sinh ho·∫°t',
      description: 'Tr·∫ª c√≥ th·ªÉ t·ª± th·ª±c hi·ªán c√°c ho·∫°t ƒë·ªông sinh ho·∫°t h√†ng ng√†y',
      questions: [
        InterventionQuestion(
          id: 'goal_3_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_3_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_3_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
    InterventionGoal(
      id: 'goal_4',
      title: 'K·ªπ nƒÉng v·∫≠n ƒë·ªông tinh',
      description:
          'Tr·∫ª c√≥ th·ªÉ th·ª±c hi·ªán c√°c ho·∫°t ƒë·ªông c·∫ßn s·ª± kh√©o l√©o c·ªßa b√†n tay',
      questions: [
        InterventionQuestion(
          id: 'goal_4_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_4_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_4_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
    InterventionGoal(
      id: 'goal_5',
      title: 'K·ªπ nƒÉng nh·∫≠n th·ª©c',
      description:
          'Tr·∫ª c√≥ th·ªÉ hi·ªÉu v√† th·ª±c hi·ªán c√°c nhi·ªám v·ª• nh·∫≠n th·ª©c ƒë∆°n gi·∫£n',
      questions: [
        InterventionQuestion(
          id: 'goal_5_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_5_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_5_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
    InterventionGoal(
      id: 'goal_6',
      title: 'Ki·ªÉm so√°t c·∫£m x√∫c',
      description: 'Tr·∫ª c√≥ th·ªÉ ki·ªÉm so√°t v√† th·ªÉ hi·ªán c·∫£m x√∫c m·ªôt c√°ch ph√π h·ª£p',
      questions: [
        InterventionQuestion(
          id: 'goal_6_lv1',
          question: 'Con b·∫°n c√≥ th·ª±c hi·ªán ƒë∆∞·ª£c kh√¥ng?',
          type: QuestionType.yesNo,
          options: ['C√≥', 'Kh√¥ng'],
        ),
        InterventionQuestion(
          id: 'goal_6_lv2',
          question: 'Con b·∫°n c√≥ c·∫ßn tr·ª£ gi√∫p kh√¥ng?',
          type: QuestionType.supportLevel,
          options: [
            'H·ªó tr·ª£ to√†n ph·∫ßn',
            'H·ªó tr·ª£ b·∫±ng nhi·ªÅu (c·∫ßm tay, nh·∫Øc li√™n t·ª•c)',
            'H·ªó tr·ª£ b·∫±ng c·ª≠ ch·ªâ (ch·ªâ tay, g·ª£i √Ω)',
            'H·ªó tr·ª£ b·∫±ng l·ªùi',
            'Kh√¥ng c·∫ßn h·ªó tr·ª£',
          ],
        ),
        InterventionQuestion(
          id: 'goal_6_lv3',
          question:
              'Con b·∫°n c√≥ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥ ·ªü nhi·ªÅu m√¥i tr∆∞·ªùng kh√°c nhau kh√¥ng?',
          type: QuestionType.environment,
          options: ['Ch·ªâ ·ªü nh√†', '·ªû nh√† v√† tr∆∞·ªùng h·ªçc', '·ªû m·ªçi n∆°i'],
        ),
      ],
    ),
  ];

  // Legacy tracking data for backward compatibility
  static const List<TrackingCategory> categories = [
    TrackingCategory(
      name: 'Giao ti·∫øp',
      maxScore: 2,
      questions: [
        TrackingQuestion(
          id: 'comm_1',
          category: 'Giao ti·∫øp',
          question:
              'H√¥m nay tr·∫ª c√≥ ch·ªß ƒë·ªông n√≥i ho·∫∑c ra hi·ªáu ƒë·ªÉ giao ti·∫øp kh√¥ng?',
          options: ['Kh√¥ng', 'Ch·ªâ khi ƒë∆∞·ª£c nh·∫Øc', 'Ch·ªß ƒë·ªông'],
          scores: [0, 1, 2],
        ),
        TrackingQuestion(
          id: 'comm_2',
          category: 'Giao ti·∫øp',
          question: 'Tr·∫ª c√≥ tr·∫£ l·ªùi khi ƒë∆∞·ª£c g·ªçi t√™n ho·∫∑c h·ªèi kh√¥ng?',
          options: ['Kh√¥ng', 'ƒê√¥i khi', 'Th∆∞·ªùng xuy√™n'],
          scores: [0, 1, 2],
        ),
      ],
    ),
    TrackingCategory(
      name: 'T∆∞∆°ng t√°c x√£ h·ªôi',
      maxScore: 2,
      questions: [
        TrackingQuestion(
          id: 'social_1',
          category: 'T∆∞∆°ng t√°c x√£ h·ªôi',
          question: 'Tr·∫ª c√≥ nh√¨n v√†o m·∫Øt khi giao ti·∫øp kh√¥ng?',
          options: ['Kh√¥ng', 'Th·ªânh tho·∫£ng', 'T·ª± nhi√™n'],
          scores: [0, 1, 2],
        ),
        TrackingQuestion(
          id: 'social_2',
          category: 'T∆∞∆°ng t√°c x√£ h·ªôi',
          question: 'Tr·∫ª c√≥ ch·ªß ƒë·ªông tham gia ch∆°i c√πng ng∆∞·ªùi kh√°c kh√¥ng?',
          options: ['Kh√¥ng', 'Khi ƒë∆∞·ª£c m·ªùi', 'Ch·ªß ƒë·ªông'],
          scores: [0, 1, 2],
        ),
      ],
    ),
    TrackingCategory(
      name: 'H√†nh vi & c·∫£m x√∫c',
      maxScore: 2,
      questions: [
        TrackingQuestion(
          id: 'behavior_1',
          category: 'H√†nh vi & c·∫£m x√∫c',
          question: 'H√¥m nay tr·∫ª c√≥ h√†nh vi l·∫∑p l·∫°i ho·∫∑c kh√≥ ki·ªÉm so√°t kh√¥ng?',
          options: ['Nhi·ªÅu', 'Th·ªânh tho·∫£ng', 'Kh√¥ng ƒë√°ng k·ªÉ'],
          scores: [0, 1, 2],
        ),
        TrackingQuestion(
          id: 'behavior_2',
          category: 'H√†nh vi & c·∫£m x√∫c',
          question: 'Tr·∫ª c√≥ d·ªÖ n·ªïi n√≥ng ho·∫∑c lo √¢u qu√° m·ª©c kh√¥ng?',
          options: ['R·∫•t th∆∞·ªùng', 'Th·ªânh tho·∫£ng', 'H·∫ßu nh∆∞ kh√¥ng'],
          scores: [0, 1, 2],
        ),
      ],
    ),
    TrackingCategory(
      name: 'K·ªπ nƒÉng nh·∫≠n th·ª©c',
      maxScore: 2,
      questions: [
        TrackingQuestion(
          id: 'cognitive_1',
          category: 'K·ªπ nƒÉng nh·∫≠n th·ª©c',
          question:
              'Tr·∫ª c√≥ ho√†n th√†nh nhi·ªám v·ª• ƒë∆°n gi·∫£n (x·∫øp h√¨nh, gh√©p tranh) kh√¥ng?',
          options: ['Kh√¥ng', 'C√≥ h·ªó tr·ª£', 'T·ª± l√†m'],
          scores: [0, 1, 2],
        ),
        TrackingQuestion(
          id: 'cognitive_2',
          category: 'K·ªπ nƒÉng nh·∫≠n th·ª©c',
          question: 'Tr·∫ª c√≥ hi·ªÉu v√† l√†m theo h∆∞·ªõng d·∫´n ƒë∆°n gi·∫£n kh√¥ng?',
          options: ['Kh√¥ng', 'ƒê√¥i khi', 'Th∆∞·ªùng xuy√™n'],
          scores: [0, 1, 2],
        ),
      ],
    ),
    TrackingCategory(
      name: 'T·ª± l·∫≠p',
      maxScore: 2,
      questions: [
        TrackingQuestion(
          id: 'independence_1',
          category: 'T·ª± l·∫≠p',
          question: 'Tr·∫ª c√≥ t·ª± ƒÉn, u·ªëng ho·∫∑c m·∫∑c qu·∫ßn √°o kh√¥ng?',
          options: ['Kh√¥ng', 'C√≥ h·ªó tr·ª£', 'T·ª± l√†m'],
          scores: [0, 1, 2],
        ),
        TrackingQuestion(
          id: 'independence_2',
          category: 'T·ª± l·∫≠p',
          question: 'Tr·∫ª c√≥ t·ª± d·ªçn d·∫πp ho·∫∑c c·∫•t ƒë·ªì sau khi ch∆°i kh√¥ng?',
          options: ['Kh√¥ng', 'Khi ƒë∆∞·ª£c nh·∫Øc', 'T·ª± gi√°c'],
          scores: [0, 1, 2],
        ),
      ],
    ),
  ];

  static List<TrackingQuestion> getAllQuestions() {
    List<TrackingQuestion> allQuestions = [];
    for (var category in categories) {
      allQuestions.addAll(category.questions);
    }
    return allQuestions;
  }

  static TrackingCategory? getCategoryByName(String name) {
    try {
      return categories.firstWhere((category) => category.name == name);
    } catch (e) {
      return null;
    }
  }
}

class TrackingQuestion {
  final String id;
  final String category;
  final String question;
  final List<String> options;
  final List<int> scores;

  const TrackingQuestion({
    required this.id,
    required this.category,
    required this.question,
    required this.options,
    required this.scores,
  });
}

class TrackingCategory {
  final String name;
  final List<TrackingQuestion> questions;
  final int maxScore;

  const TrackingCategory({
    required this.name,
    required this.questions,
    required this.maxScore,
  });
}
